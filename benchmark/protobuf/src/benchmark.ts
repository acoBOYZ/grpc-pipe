// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.29.3
// source: benchmark.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "benchmark";

export interface Post {
  id: string;
  title: string;
  content: string;
  likes: number;
  tags: string[];
}

export interface UserProfile {
  id: string;
  username: string;
  email: string;
  bio: string;
  settings: UserProfile_Settings | undefined;
  stats: UserProfile_Stats | undefined;
  posts: Post[];
}

export interface UserProfile_Settings {
  theme: string;
  notifications: UserProfile_Settings_Notifications | undefined;
}

export interface UserProfile_Settings_Notifications {
  email: boolean;
  sms: boolean;
  push: boolean;
}

export interface UserProfile_Stats {
  posts: number;
  followers: number;
  following: number;
  createdAt: string;
}

export interface Ping {
  message: UserProfile | undefined;
}

export interface Pong {
  message: UserProfile | undefined;
}

function createBasePost(): Post {
  return { id: "", title: "", content: "", likes: 0, tags: [] };
}

export const Post: MessageFns<Post> = {
  encode(message: Post, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.content !== "") {
      writer.uint32(26).string(message.content);
    }
    if (message.likes !== 0) {
      writer.uint32(32).int32(message.likes);
    }
    for (const v of message.tags) {
      writer.uint32(42).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Post {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePost();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.content = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.likes = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.tags.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Post {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      content: isSet(object.content) ? globalThis.String(object.content) : "",
      likes: isSet(object.likes) ? globalThis.Number(object.likes) : 0,
      tags: globalThis.Array.isArray(object?.tags) ? object.tags.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: Post): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.content !== "") {
      obj.content = message.content;
    }
    if (message.likes !== 0) {
      obj.likes = Math.round(message.likes);
    }
    if (message.tags?.length) {
      obj.tags = message.tags;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Post>, I>>(base?: I): Post {
    return Post.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Post>, I>>(object: I): Post {
    const message = createBasePost();
    message.id = object.id ?? "";
    message.title = object.title ?? "";
    message.content = object.content ?? "";
    message.likes = object.likes ?? 0;
    message.tags = object.tags?.map((e) => e) || [];
    return message;
  },
};

function createBaseUserProfile(): UserProfile {
  return { id: "", username: "", email: "", bio: "", settings: undefined, stats: undefined, posts: [] };
}

export const UserProfile: MessageFns<UserProfile> = {
  encode(message: UserProfile, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.username !== "") {
      writer.uint32(18).string(message.username);
    }
    if (message.email !== "") {
      writer.uint32(26).string(message.email);
    }
    if (message.bio !== "") {
      writer.uint32(34).string(message.bio);
    }
    if (message.settings !== undefined) {
      UserProfile_Settings.encode(message.settings, writer.uint32(42).fork()).join();
    }
    if (message.stats !== undefined) {
      UserProfile_Stats.encode(message.stats, writer.uint32(50).fork()).join();
    }
    for (const v of message.posts) {
      Post.encode(v!, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserProfile {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserProfile();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.username = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.bio = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.settings = UserProfile_Settings.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.stats = UserProfile_Stats.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.posts.push(Post.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserProfile {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      username: isSet(object.username) ? globalThis.String(object.username) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      bio: isSet(object.bio) ? globalThis.String(object.bio) : "",
      settings: isSet(object.settings) ? UserProfile_Settings.fromJSON(object.settings) : undefined,
      stats: isSet(object.stats) ? UserProfile_Stats.fromJSON(object.stats) : undefined,
      posts: globalThis.Array.isArray(object?.posts) ? object.posts.map((e: any) => Post.fromJSON(e)) : [],
    };
  },

  toJSON(message: UserProfile): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.username !== "") {
      obj.username = message.username;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.bio !== "") {
      obj.bio = message.bio;
    }
    if (message.settings !== undefined) {
      obj.settings = UserProfile_Settings.toJSON(message.settings);
    }
    if (message.stats !== undefined) {
      obj.stats = UserProfile_Stats.toJSON(message.stats);
    }
    if (message.posts?.length) {
      obj.posts = message.posts.map((e) => Post.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserProfile>, I>>(base?: I): UserProfile {
    return UserProfile.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserProfile>, I>>(object: I): UserProfile {
    const message = createBaseUserProfile();
    message.id = object.id ?? "";
    message.username = object.username ?? "";
    message.email = object.email ?? "";
    message.bio = object.bio ?? "";
    message.settings = (object.settings !== undefined && object.settings !== null)
      ? UserProfile_Settings.fromPartial(object.settings)
      : undefined;
    message.stats = (object.stats !== undefined && object.stats !== null)
      ? UserProfile_Stats.fromPartial(object.stats)
      : undefined;
    message.posts = object.posts?.map((e) => Post.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUserProfile_Settings(): UserProfile_Settings {
  return { theme: "", notifications: undefined };
}

export const UserProfile_Settings: MessageFns<UserProfile_Settings> = {
  encode(message: UserProfile_Settings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.theme !== "") {
      writer.uint32(10).string(message.theme);
    }
    if (message.notifications !== undefined) {
      UserProfile_Settings_Notifications.encode(message.notifications, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserProfile_Settings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserProfile_Settings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.theme = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.notifications = UserProfile_Settings_Notifications.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserProfile_Settings {
    return {
      theme: isSet(object.theme) ? globalThis.String(object.theme) : "",
      notifications: isSet(object.notifications)
        ? UserProfile_Settings_Notifications.fromJSON(object.notifications)
        : undefined,
    };
  },

  toJSON(message: UserProfile_Settings): unknown {
    const obj: any = {};
    if (message.theme !== "") {
      obj.theme = message.theme;
    }
    if (message.notifications !== undefined) {
      obj.notifications = UserProfile_Settings_Notifications.toJSON(message.notifications);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserProfile_Settings>, I>>(base?: I): UserProfile_Settings {
    return UserProfile_Settings.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserProfile_Settings>, I>>(object: I): UserProfile_Settings {
    const message = createBaseUserProfile_Settings();
    message.theme = object.theme ?? "";
    message.notifications = (object.notifications !== undefined && object.notifications !== null)
      ? UserProfile_Settings_Notifications.fromPartial(object.notifications)
      : undefined;
    return message;
  },
};

function createBaseUserProfile_Settings_Notifications(): UserProfile_Settings_Notifications {
  return { email: false, sms: false, push: false };
}

export const UserProfile_Settings_Notifications: MessageFns<UserProfile_Settings_Notifications> = {
  encode(message: UserProfile_Settings_Notifications, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.email !== false) {
      writer.uint32(8).bool(message.email);
    }
    if (message.sms !== false) {
      writer.uint32(16).bool(message.sms);
    }
    if (message.push !== false) {
      writer.uint32(24).bool(message.push);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserProfile_Settings_Notifications {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserProfile_Settings_Notifications();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.email = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.sms = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.push = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserProfile_Settings_Notifications {
    return {
      email: isSet(object.email) ? globalThis.Boolean(object.email) : false,
      sms: isSet(object.sms) ? globalThis.Boolean(object.sms) : false,
      push: isSet(object.push) ? globalThis.Boolean(object.push) : false,
    };
  },

  toJSON(message: UserProfile_Settings_Notifications): unknown {
    const obj: any = {};
    if (message.email !== false) {
      obj.email = message.email;
    }
    if (message.sms !== false) {
      obj.sms = message.sms;
    }
    if (message.push !== false) {
      obj.push = message.push;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserProfile_Settings_Notifications>, I>>(
    base?: I,
  ): UserProfile_Settings_Notifications {
    return UserProfile_Settings_Notifications.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserProfile_Settings_Notifications>, I>>(
    object: I,
  ): UserProfile_Settings_Notifications {
    const message = createBaseUserProfile_Settings_Notifications();
    message.email = object.email ?? false;
    message.sms = object.sms ?? false;
    message.push = object.push ?? false;
    return message;
  },
};

function createBaseUserProfile_Stats(): UserProfile_Stats {
  return { posts: 0, followers: 0, following: 0, createdAt: "" };
}

export const UserProfile_Stats: MessageFns<UserProfile_Stats> = {
  encode(message: UserProfile_Stats, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.posts !== 0) {
      writer.uint32(8).int32(message.posts);
    }
    if (message.followers !== 0) {
      writer.uint32(16).int32(message.followers);
    }
    if (message.following !== 0) {
      writer.uint32(24).int32(message.following);
    }
    if (message.createdAt !== "") {
      writer.uint32(34).string(message.createdAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserProfile_Stats {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserProfile_Stats();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.posts = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.followers = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.following = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserProfile_Stats {
    return {
      posts: isSet(object.posts) ? globalThis.Number(object.posts) : 0,
      followers: isSet(object.followers) ? globalThis.Number(object.followers) : 0,
      following: isSet(object.following) ? globalThis.Number(object.following) : 0,
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
    };
  },

  toJSON(message: UserProfile_Stats): unknown {
    const obj: any = {};
    if (message.posts !== 0) {
      obj.posts = Math.round(message.posts);
    }
    if (message.followers !== 0) {
      obj.followers = Math.round(message.followers);
    }
    if (message.following !== 0) {
      obj.following = Math.round(message.following);
    }
    if (message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserProfile_Stats>, I>>(base?: I): UserProfile_Stats {
    return UserProfile_Stats.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserProfile_Stats>, I>>(object: I): UserProfile_Stats {
    const message = createBaseUserProfile_Stats();
    message.posts = object.posts ?? 0;
    message.followers = object.followers ?? 0;
    message.following = object.following ?? 0;
    message.createdAt = object.createdAt ?? "";
    return message;
  },
};

function createBasePing(): Ping {
  return { message: undefined };
}

export const Ping: MessageFns<Ping> = {
  encode(message: Ping, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== undefined) {
      UserProfile.encode(message.message, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Ping {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePing();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = UserProfile.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Ping {
    return { message: isSet(object.message) ? UserProfile.fromJSON(object.message) : undefined };
  },

  toJSON(message: Ping): unknown {
    const obj: any = {};
    if (message.message !== undefined) {
      obj.message = UserProfile.toJSON(message.message);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Ping>, I>>(base?: I): Ping {
    return Ping.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Ping>, I>>(object: I): Ping {
    const message = createBasePing();
    message.message = (object.message !== undefined && object.message !== null)
      ? UserProfile.fromPartial(object.message)
      : undefined;
    return message;
  },
};

function createBasePong(): Pong {
  return { message: undefined };
}

export const Pong: MessageFns<Pong> = {
  encode(message: Pong, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== undefined) {
      UserProfile.encode(message.message, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Pong {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePong();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = UserProfile.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Pong {
    return { message: isSet(object.message) ? UserProfile.fromJSON(object.message) : undefined };
  },

  toJSON(message: Pong): unknown {
    const obj: any = {};
    if (message.message !== undefined) {
      obj.message = UserProfile.toJSON(message.message);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Pong>, I>>(base?: I): Pong {
    return Pong.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Pong>, I>>(object: I): Pong {
    const message = createBasePong();
    message.message = (object.message !== undefined && object.message !== null)
      ? UserProfile.fromPartial(object.message)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
